[{"C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\index.js":"1","C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\components\\Project.js":"2","C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\modals\\EditProject.js":"3","C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\reportWebVitals.js":"4","C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\modals\\CreateProject.js":"5"},{"size":500,"mtime":1652028626942,"results":"6","hashOfConfig":"7"},{"size":2629,"mtime":1652098278006,"results":"8","hashOfConfig":"7"},{"size":1880,"mtime":1652098278022,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1652098922767,"results":"10","hashOfConfig":"7"},{"size":1740,"mtime":1652098278022,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s1bu1y",{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\index.js",[],"C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\components\\Project.js",["24","25","26"],"import React, {useEffect, useState} from 'react';\nimport CreateProject from '../modals/CreateProject'\nimport Card from './Card';\nimport { BsSearch} from 'react-icons/bs'\n\n\nconst TodoList = () => {\n    const [modal, setModal] = useState(false);\n    const [projectList, setTaskList] = useState([]);\n    const [searchTerm, setSearchTerm]= useState(\"\");\n    \n    useEffect(() => {\n        let arr = localStorage.getItem(\"projectList\")\n       \n        if(arr){\n            let obj = JSON.parse(arr)\n            setTaskList(obj)\n        }\n    }, [])\n\n\n    const deleteTask = (index) => {\n        let tempList = projectList\n        tempList.splice(index, 1)\n        localStorage.setItem(\"projectList\", JSON.stringify(tempList))\n        setTaskList(tempList)\n        window.location.reload()\n    }\n\n    const updateListArray = (obj, index) => {\n        let tempList = projectList\n        tempList[index] = obj\n        localStorage.setItem(\"projectList\", JSON.stringify(tempList))\n        setTaskList(tempList)\n        window.location.reload()\n    }\n\n    const toggle = () => {\n        setModal(!modal);\n    }\n\n    const saveTask = (projectObj) => {\n        let tempList = projectList\n        tempList.push(projectObj)\n        localStorage.setItem(\"projectList\", JSON.stringify(tempList))\n        setTaskList(projectList)\n        setModal(false)\n    }\n    \n\n\n    return (\n        <>\n            <div className='header text-center'>\n                <div >\n                    <h3>Project Planning Dashboard</h3>\n\n                </div>\n                <div >\n\n                    <input\n                      type=\"text\" placeholder=\"Type to search...\" onChange={(event)=>{\n                    setSearchTerm(event.target.value)\n                    }}\n                    />\n\n                </div>\n                \n                <button className = \"btn btn-primary mt-2\" onClick = {() => setModal(true)} >Create Project</button>\n            </div>\n            <div className = \"project-container\">\n\n            {projectList && projectList.filter((obj)=>{\n                if( searchTerm==\"\"){\n                    return obj\n                } else if (obj.Name.toLowerCase().includes(searchTerm.toLowerCase()) ||obj.Description.toLowerCase().includes(searchTerm.toLowerCase()) ){\n                    return obj\n                }\n                \n\n            }).map((obj , index) => <Card projectObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/> )}\n            </div>\n            <CreateProject toggle = {toggle} modal = {modal} save = {saveTask}/>\n        </>\n    );\n};\n\nexport default TodoList;","C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\modals\\EditProject.js",["27"],"import React, { useState , useEffect} from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditProjectPopup = ({modal, toggle, updateTask, projectObj}) => {\n    const [projectName, setTaskName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const handleChange = (e) => {\n        \n        const {name, value} = e.target\n\n        if(name === \"projectName\"){\n            setTaskName(value)\n        }else{\n            setDescription(value)\n        }\n\n\n    }\n\n    useEffect(() => {\n        setTaskName(projectObj.Name)\n        setDescription(projectObj.Description)\n    },[])\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['Name'] = projectName\n        tempObj['Description'] = description\n        updateTask(tempObj)\n    }\n\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Update Project</ModalHeader>\n            <ModalBody>\n            \n                    <div className = \"form-group\">\n                        <label>Project Name</label>\n                        <input type=\"text\" className = \"form-control\" value = {projectName} onChange = {handleChange} name = \"projectName\"/>\n                    </div>\n                    <div className = \"form-group\">\n                        <label>Description</label>\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\n                    </div>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n            </ModalFooter>\n      </Modal>\n    );\n};\n\nexport default EditProjectPopup;","C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\ayush\\OneDrive\\Desktop\\Project Planning Dashboard\\src\\modals\\CreateProject.js",[],{"ruleId":"28","severity":1,"message":"29","line":4,"column":10,"nodeType":"30","messageId":"31","endLine":4,"endColumn":18},{"ruleId":"32","severity":1,"message":"33","line":73,"column":53,"nodeType":"34","messageId":"35","endLine":73,"endColumn":55},{"ruleId":"36","severity":1,"message":"37","line":74,"column":31,"nodeType":"38","messageId":"39","endLine":74,"endColumn":33},{"ruleId":"40","severity":1,"message":"41","line":24,"column":7,"nodeType":"42","endLine":24,"endColumn":9,"suggestions":"43"},"no-unused-vars","'BsSearch' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectObj.Description' and 'projectObj.Name'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'projectObj.Name', you can also switch to useReducer instead of useState and read 'projectObj.Name' in the reducer.","ArrayExpression",["44"],{"desc":"45","fix":"46"},"Update the dependencies array to be: [projectObj.Description, projectObj.Name]",{"range":"47","text":"48"},[646,648],"[projectObj.Description, projectObj.Name]"]